mean(ll<p & ul>p)
})
plot(pvals,coverage)
help(plot)
plot(pvals,coverage,type="b")
abline(h=0.95)
n<-20
coverage<-sapply(pvals,function(p) {
phats<-(rbinom(nosim,prob=p,size=n)+2)/(n+4)
ll<-phats-qnorm(0.975)*sqrt(phats*(1-phats)/n)
ul<-phats+qnorm(0.975)*sqrt(phats*(1-phats)/n)
mean(ll<p & ul>p)
})
plot(pvals,coverage,type="b")
abline(h=0.95)
x<-5
t<-94.32
lambda<-x/t
lambda+c(-1,1)*qnorm(0.975)*sqrt(lambda/t)
round(lambda+c(-1,1)*qnorm(0.975)*sqrt(lambda/t),3)
poisson.test(x,T=94.32)
round(poisson.test(x,T=94.32)$conf.int,3)
pnorm(-0.7)
qnorm(0.95)
qnorm(0.95,mean=100,sd=10/sqrt(50))
help(pbinom)
pbinom(5,size=6,prob=0.5)
pbinom(5,size=6,prob=0.5,lower.tail=FALSE)
pbinom(4,size=6,prob=0.5,lower.tail=FALSE)
help(pnorm)
pnorm(0.51,mean=0.5,sd=sqrt(1/12),lower.tail=FALSE)
help(punif)
pnorm(0.51,mean=0.5,sd=sqrt(1/12)/10,lower.tail=FALSE)
n = 10
dice = 1:6
#This is wrong
#wrong <- rep(mean(sample(dice,n,TRUE)), 100)
#this is correct
right <- replicate(100, mean(sample(dice,n,TRUE)))
par(mfrow=c(1,2))
#hist(wrong)
hist(right)
boxplot(right)
ppois(20,lambda=16.5*2)
pnorm(70,mean=80,sd=10)
help(qnorm)
qnorm(0.95,mean=1100,sd=75)
1100+1.96*75^2/100
1100+1.96*75/10
pbinom(3,size=5,prob=0.5,lower.tail=FALSE)
pnorm(14,mean=15,sd=1,lower.tail=FALSE)
pnorm(16,mean=15,sd=1,lower.tail=FALSE)
pnorm(14,mean=15,sd=1,lower.tail=FALSE)-pnorm(14,mean=15,sd=1,lower.tail=FALSE)
pnorm(14,mean=15,sd=1,lower.tail=FALSE)-pnorm(16,mean=15,sd=1,lower.tail=FALSE)
pnorm(14,mean=15,sd=1,lower.tail=FALSE)-pnorm(16,mean=15,sd=1,lower.tail=TRUE)
pnorm(14,mean=15,sd=1,lower.tail=FALSE)-pnorm(16,mean=15,sd=1,lower.tail=FALSE)
pnorm(14,mean=15,sd=1)-pnorm(16,mean=15,sd=1)
ppois(10,lambda=5*3)
2^12
2^11
read.csv("c:/GIT/EdX-DataSci/DAT203x_Lab02A/diabetic_data.csv")
diabetes<-read.csv("c:/GIT/EdX-DataSci/DAT203x_Lab02A/diabetic_data.csv")
View(diabetes)
library(dplyr)
install.packages("dplyr")
library(dplyr)
frame2<-filter(diabetes, race=="Caucasian")
View(frame2)
frame2<-filter(frame2, admission_type_id==1)
frame2<-group_by(gender)
frame2<-group_by(frame2,gender)
View(frame2)
frame2<-distinct(frame2,gender)
frame2<-diabetes
frame2<-distinct(frame2,race)
frame2<-sample_frac(diabetes,0.5)
frame1<-summarize(frame2, m1=mean(time_in_hospital))
View(frame1)
View(frame1)
frame1[,m1]
frame3<-frame2
frame3[,]
frame3<-filter(frame2,race=="AfricanAmerican")
View(frame3)
frame3[,3]
frame3[,2]
frame3[1,]
frame3[1,2]
Azure = FALSE
if(Azure) {
frame1<-maml.mapInputPort(1)
} else {
# if in R studio read in the csv
dirName <- "C:/GIT/EdX-DataSci/DAT203_Lab02B/"
fileName <- "cadairydata.csv"
infile<-file.path(dirName,fileName)
frame1<-read.csv(infile,header=TRUE,stringsAsFactors = FALSE)
}
## select a subset of columns
library(dplyr)
frame1<-select(frame1, Year, Month, Cottagecheese.Prod, Icecream.Prod, Milk.Prod)
# chain verbs to show totals for August
frame1<-frame1 %>%
filter(Month=='Aug') %>%
mutate(Total.Prod = Cottagecheese.Prod + Icecream.Prod + Milk.Prod)
# if in Azure output the data frame
if(Azure) maml.mapoutputPort('frame1')
frame1
frame1[1:5,]
frame1[1:5,2]
# set a flag to define the environment
Azure = FALSE
if(Azure) {
frame1<-maml.mapInputPort(1)
} else {
# if in R studio read in the csv
dirName <- "C:/GIT/EdX-DataSci/DAT203_Lab02B/"
fileName <- "cadairydata.csv"
infile<-file.path(dirName,fileName)
frame1<-read.csv(infile,header=TRUE,stringsAsFactors = FALSE)
}
## select a subset of columns
library(dplyr)
frame1<-select(frame1, Year, Month, Cottagecheese.Prod, Icecream.Prod, Milk.Prod)
# chain verbs to show totals for August
frame1<-frame1 %>%
filter(Month=='Aug') %>%
mutate(Total.Prod = Cottagecheese.Prod + Icecream.Prod + Milk.Prod)
# plot something
plot(frame1.Cottagecheese.Prod, frame1.Year)
# if in Azure output the data frame
if(Azure) maml.mapoutputPort('frame1')
plot(frame1$Cottagecheese.Prod, frame1$Year)
# set a flag to define the environment
# set a flag to define the environment
Azure = FALSE
if(Azure) {
frame1<-maml.mapInputPort(1)
} else {
# if in R studio read in the csv
dirName <- "C:/GIT/EdX-DataSci/DAT203_Lab02B/"
fileName <- "cadairydata.csv"
infile<-file.path(dirName,fileName)
frame1<-read.csv(infile,header=TRUE,stringsAsFactors = FALSE)
}
## select a subset of columns
library(dplyr)
frame1<-select(frame1, Year, Month, Cottagecheese.Prod, Icecream.Prod, Milk.Prod)
# chain verbs to show totals for August
frame1<-frame1 %>%
filter(Month=='Aug') %>%
mutate(Total.Prod = Cottagecheese.Prod + Icecream.Prod + Milk.Prod)
# plot something
plot(frame1$Year,frame1$Cottagecheese.Prod)
# if in Azure output the data frame
if(Azure) maml.mapoutputPort('frame1')
frame1[1:5]
frame1[1:5,]
head(frame1)
summary(frame1)
str(frame1)
frame2<-lapply(frame1[,"Cottagecheese.Prod"],mean)
frame2
View(frame1)
frame2<-lapply(frame1[,"Cottagecheese.Prod"],round(2))
frame2<-lapply(frame1[,"Cottagecheese.Prod"],round(,2))
View(frame1)
frame2<-frame1[Year>=2000 && Milk.Prod>3.0,]
frame2<-frame1[frame1$Year>=2000 && frame1$Milk.Prod>3.0,]
View(frame2)
frame2<-frame1[frame1$Year>=2000 && frame1$Milk.Prod>3.0]
frame2<-subset(frame1,frame1$Year>=2000 && frame1$Milk.Prod>3.0)
View(frame2)
frame2<-subset(frame1,frame1$Year>=2000 & frame1$Milk.Prod>3.0)
frame2<-frame1[frame1$Year>=2000 & frame1$Milk.Prod>3.0]
frame2<-frame1[frame1$Year>=2000 & frame1$Milk.Prod>3.0,]
View(frame2)
cols<-c("Year","Month")
frame3<-frame3(,!names(cols))
dataframe1<-frame2[,!names(cols)]
dataframe1<-frame2[,!names(frame2) %in% cols]
View(dataframe1)
pairs(dataframe1)
## load the data
dirName <- "c:/git/EdX-DataSci/DAT203x_LAB03A/"
fileName <- "EnergyEfficiencyRegressiondata.csv"
infile <- file.path(dirName,fileName)
eeframe <- read.csv(infile,header=TRUE,stringsAsFactors = FALSE)
# remove the dots from the column names (spaces were replaced with dots by read.csv)
# gsub() finds and replaces all occurences of the . and replaces with nothing
names(eeframe) <- gsub("\\.","",names(eeframe))
# remove columns we aren't going to use
eeframe$CoolingLoad <- NULL
# convert some columns to factors from numeric as they have few discrete values
# uses a short inline function to first convert to char and then to factor
# does R not have a lambda function type as in Python?
catList <- c("OverallHeight","Orientation")
eeframe[,catList] <- lapply(eeframe[,catList],function(x){as.factor(as.character(x))})
# scale the numeric features using scale() which normalizes the columns
# such that the mean is 0 and the sd is 1
scaleList <- c("RelativeCompactness","SurfaceArea","WallArea","RoofArea",
"GlazingArea","GlazingAreaDistribution")
eeframe[,scaleList] <- lapply(eeframe[,scaleList],function(x){as.numeric(scale(x))})
## load the data
dirName <- "c:/git/EdX-DataSci/DAT203x_LAB03A/"
fileName <- "EnergyEfficiencyRegressiondata.csv"
infile <- file.path(dirName,fileName)
eeframe <- read.csv(infile,header=TRUE,stringsAsFactors = FALSE)
# remove the dots from the column names (spaces were replaced with dots by read.csv)
# gsub() finds and replaces all occurences of the . and replaces with nothing
names(eeframe) <- gsub("\\.","",names(eeframe))
# remove columns we aren't going to use
eeframe$CoolingLoad <- NULL
# convert some columns to factors from numeric as they have few discrete values
# uses a short inline function to first convert to char and then to factor
# does R not have a lambda function type as in Python?
catList <- c("OverallHeight","Orientation")
eeframe[,catList] <- lapply(eeframe[,catList],function(x){as.factor(as.character(x))})
# scale the numeric features using scale() which normalizes the columns
# such that the mean is 0 and the sd is 1
scaleList <- c("RelativeCompactness","SurfaceArea","WallArea","RoofArea",
"GlazingArea","GlazingAreaDistribution")
eeframe[,scaleList] <- lapply(eeframe[,scaleList],function(x){as.numeric(scale(x))})
library(ggplot2)
Azure = FALSE
if(Azure) {
eeframe <- maml.mapInputPort(1)
maml.mapOutputPort('eeframe')
}
# construct a pairwise scatter plot
pairs(~.,data=eeframe)
## use ggplot2 to create conditioned scatter plots
library(ggplot2)
plotCols <- c("RelativeCompactness","SurfaceArea",
"WallArea","RoofArea","GlazingArea",
"GlazingAreaDistribution")
plotEE <- function(x){
title <- paste("HeatingLoad vs", x, "\n conditioned on
OverallHeight and Orientation")
ggplot(eeframe, aes_string(x, "HeatingLoad")) +
geom_point() + facet_grid(OverallHeight ~ Orientation) +
ggtitle(title) +
stat_smooth(method="lm")
}
# use the plotEE func to generate plots for each column in plotCols
lapply(plotCols, plotEE)
## create series of histograms
plotCols4 <- c("RelativeCompactness","SurfaceArea",
"WallArea","RoofArea","GlazingArea",
"GlazingAreaDistribution","HeatingLoad")
library(gridExtra)
eeHist <- function(x){
title <- paste("Histogram of",x,"\n conditioned on OverallHeight")
ggplot(eeframe,aes_string(y=..density..)) +
facet_grid(.~OverallHeight) +
ggtitle(title)
geom_density()
}
lapply(plotCols4,eeHist)
## create series of histograms
plotCols4 <- c("RelativeCompactness","SurfaceArea",
"WallArea","RoofArea","GlazingArea",
"GlazingAreaDistribution","HeatingLoad")
library(gridExtra)
eeHist <- function(x){
title <- paste("Histogram of",x,"\n conditioned on OverallHeight")
ggplot(eeframe,aes_string(x)) +
geom_histogram(aes(y=..density..)) +
facet_grid(.~OverallHeight) +
ggtitle(title)
geom_density()
}
lapply(plotCols4,eeHist)
## create series of histograms
plotCols4 <- c("RelativeCompactness","SurfaceArea",
"WallArea","RoofArea","GlazingArea",
"GlazingAreaDistribution","HeatingLoad")
library(gridExtra)
eeHist <- function(x){
title <- paste("Histogram of",x,"\n conditioned on OverallHeight")
ggplot(eeframe,aes_string(x)) +
geom_histogram(aes(y=..density..)) +
facet_grid(.~OverallHeight) +
ggtitle(title)
geom_density()
}
lapply(plotCols4,eeHist)
plotCols4 <- c("RelativeCompactness","SurfaceArea",
"WallArea","RoofArea","GlazingArea",
"GlazingAreaDistribution","HeatingLoad")
library(gridExtra)
eeHist <- function(x){
title <- paste("Histogram of",x,"\n conditioned on OverallHeight")
ggplot(eeframe,aes_string(x)) +
geom_histogram(aes(y=..density..)) +
facet_grid(.~OverallHeight) +
ggtitle(title)
geom_density()
}
lapply(plotCols4,eeHist)
## create series of histograms
plotCols4 <- c("RelativeCompactness","SurfaceArea",
"WallArea","RoofArea","GlazingArea",
"GlazingAreaDistribution","HeatingLoad")
library(gridExtra)
eeHist <- function(x){
title <- paste("Histogram of",x,"\n conditioned on OverallHeight")
ggplot(eeframe,aes_string(x)) +
geom_histogram(aes(y=..density..)) +
facet_grid(.~OverallHeight) +
ggtitle(title) +
geom_density()
}
lapply(plotCols4,eeHist)
# create box plots
eeBox <- function(x){
title <- paste("Box plot of",x,"\n by OverallHeight")
ggplot(eeframe,aes_string("OverallHeight",x)) +
geom_boxplot() +
ggtitle(title)
}
lapply(plotCols4,eeBox)
View(eeframe)
help(strsplit)
noquote(strsplit("A text I want to display with spaces", NULL)[[1]])
noquote(strsplit("A text I want to display with spaces", NULL)[[1]][1])
noquote(strsplit("And text I want to display with spaces", NULL)[[1]][1])
strsplit("And text I want to display with spaces", NULL)[[1]][1]
strsplit("And-text I want to display with spaces", NULL)[[1]][1]
strsplit("And-text I want to display with spaces", NULL)[[1]]
strsplit("And-text I want to display with spaces", "-")[[1]]
View(eeframe)
View(eeframe)
eeframe[eeframe[,"RoofArea"] < -1.0]
eeframe[eeframe[,"RoofArea" < -1.0]]
eeframe[eeframe[,"RoofArea"]] <-1
eeframe[eeframe[,"RoofArea"]]
eeframe[,"RoofArea" < 0]
eeframe[,"RoofArea"]<0
eeframe[eeframe[,"RoofArea"]<0]
eeframe[eeframe$RoofArea <0]
eeframe[eeframe$RoofArea <0,]
eeframe[eeframe$RoofArea <0,"RoofArea"]
plot(eeframe[eeframe$RoofArea < 0, "RoofArea"],eeframe[eeframe$SurfaceArea > 0, "SurfaceArea"])
plot(eeframe[eeframe$RoofArea < 0, "RoofArea"],eeframe[eeframe$SurfaceArea < 0, "SurfaceArea"])
library(dplyr)
library(hflights)
install.packages(hflights)
install.packages("hflights")
library(hflights)
data(hflights)
head(hflights)
flights <- tbl_df(hflights)
flights
head(flights)
head(flights, 20)
flights[flights$Month==1 & flights$DayofMonth==1, ]
filter(flights, Month=1, DayOfMonth=1)
filter(flights, Month==1, DayOfMonth==1)
filter(flights, Month==1, DayofMonth==1)
filter(flights, UniqueCarrier %in% c("AA","UA"))
select(flights, Year:DayofMonth, DayOfWeek==1, contains("FlightNum"))
select(flights, Year:DayofMonth, contains("FlightNum")) %>%
filter(flights,DayOfWeek==1)
filter(flights,DayofWeek==1)
filter(flights,DayOfWeek==1)
select(flights, Year:DayOfWeek, contains("Time")) %>%
filter(flights,DayOfWeek==1)
select(flights, Year:DayOfWeek, contains("Time"))
filter(select(flights, Year:DayOfWeek, contains("Time")), DayOfWeek==1)
flights %>% select(Year:DayOfWeek,contains("Time")) %>%
filter(DayOfWeek==1)
x1 <- 1:10; x2 <- 1:16
x1 <- 1:10; x2 <- 11:20
x2-x1 %>% sum() %>% sqrt()
(x2-x1)^2 %>% sum() %>% sqrt()
(x2-x1) %>% sum() %>% sqrt()
flights %>% select(DepTime, AirTime) %>%
arrange(desc(AirTime))
flights %>% select(UniqueCarrier, AirTime) %>% arrange(desc(AirTime))
flights %>% select(UniqueCarrier, DepDelay) %>% arrange(desc(DepDelay))
View(flights)
flights <- flights %>% mutate(Speed = (Distance/AirTime)*60)
flights %>% group_by(Dest) %>%
summarise(avg_delay = mean(ArrDelay, na.rm=TRUE))
flights %>% group_by(Dest) %>%
summarise(avg_delay = mean(ArrDelay, na.rm=TRUE)) %>%
arrange(avg_delay)
flights %>% group_by(Dest) %>%
summarise(avg_delay = mean(ArrDelay, na.rm=TRUE)) %>%
arrange(desc(avg_delay))
flights %>% group_by(UniqueCarrier) %>%
summarise_each(funs(mean), Canceled, Diverted)
flights %>% group_by(UniqueCarrier) %>%
summarise_each(funs(mean), Cancelled, Diverted)
flights %>% group_by(UniqueCarrier) %>%
summarise_each(funs(min(.,na.rm=TRUE), max(., na.rm=TRUE)), contains("Delay"))
flights %>% group_by(Dest)
flights %>% group_by(Dest) %>%
summarise()
help("summarise")
flights %>% group_by(Dest) %>%
summarise(avg_delay = mean(ArrDelay, na.rm=TRUE))
flights %>% group_by(Month, DayofMonth) %>%
summarise(flight_count = n()) %>%
arrange(desc(flight_count))
help(ungroup)
flights %>% group_by(Dest) %>%
summarise(flight_count = n(), plane_count=n_distinct(TailNum))
flights %>% group_by(Dest) %>% tally(sort=TRUE)
flights %>% group_by(Dest) %>% select(Cancelled) %>% table() %>% head(20)
flights %>% filter(min_rank(DepDelay))
flights %>% filter(min_rank(DepDelay) >=10)
flights %>% filter(min_rank(DepDelay) >=10) %>% select(DepDelay)
flights %>% filter(min_rank(desc(DepDelay) >=10) %>% select(DepDelay)
flights %>% filter(min_rank(desc(DepDelay)) >=10) %>% select(DepDelay)
flights %>% group_by(UniqueCarrier) %>% select(Month, DayofMonth, DepDelay) %>%
top_n(3) %>% arrange(UniqueCarrier, desc(DepDelay))
flights %>% group_by(Month) %>%
summarise(flight_count = n()) %>%
mutate(change = flight_count - lag(flight_count))
flights %>% group_by(Month) %>%
tally() %>%
mutate(change = n - lag(n))
sample_n(flights)
flights %>% sample_n(5)
flights %>% sample_frac(size=0.25,replace=TRUE)
str(flights)
summary(flights)
flights %>% glimpse()
flights %>% select(UniqueCarrier) %>% summarise(carriers = n())
flights %>% select(UniqueCarrier) %>% summarise(carriers = n_distinct())
flights %>% select(UniqueCarrier) %>% summarise(carriers = n_distinct(UniqueCarrier))
flights %>% summarise(carriers = n_distinct(UniqueCarrier))
str(mpg)
library(ggplots)
library(ggplot2)
str(mpg)
qplot(displ, hwy, data=mpg)
plot(displ, hwy, data=mpg)
plot(mpg$displ, mpg$hwy)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, color=manufacturer)
qplot(displ, hwy, data=mpg, color=manufacturer, geom=c("smooth"))
qplot(displ, hwy, data=mpg, color=manufacturer, geom=c("point",smooth"))
qplot(displ, hwy, data=mpg, color=manufacturer, geom=c("point","smooth"))
qplot(displ, hwy, data=mpg, geom=c("point","smooth"))
qplot(hwy)
qplot(hwy, data=mpg)
qplot(hwy, data=mpg, fill=drv)
qplot(hwy, data=mpg, fill=drv, binwidth=4)
qplot(hwy, data=mpg, fill=drv, binwidth=2)
qplot(hwy, data=mpg, facets=drv~., binwidth=2)
qplot(hwy, data=mpg, facets=.~drv, binwidth=2)
qplot(displ,hwy, data=mpg, facets=.~drv)
qplot(hwy, data=mpg, geom="density")
qplot(hwy, data=mpg, geom="density", fill=drv)
qplot(hwy, data=mpg, geom="density", fill=manufacturer)
qplot(hwy, data=mpg, geom="density", color=manufacturer)
qplot(hwy, data=mpg, geom="density", color=drv)
qplot(displ, hwy, data=mpg, shape=drv)
qplot(displ, hwy, data=mpg, shape=drv, color=manufacturer)
qplot(displ, hwy, data=mpg, color=drv, geom=c("point","smooth"), method="lm")
qplot(displ, hwy, data=mpg, facets=drv, geom=c("point","smooth"), method="lm")
qplot(displ, hwy, data=mpg, facets=.~drv, geom=c("point","smooth"), method="lm")
library(XML)
install.packages("XML")
install.packages("Rcurl")
install.packages("RCurl")
install.packages("xslx")
install.packages("XLConnect")
install.packages("jsonLite")
install.packages("jsonlite")
library(XLConnect)
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(rJava)
library(rJava)
library(xlsx)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
setwd("C:/GIT/datascience/Rprogramming")
download.file(fileURL,destfile="natGas.xlsx",method="curl")
library(RCurl)
download.file(fileURL,destfile="natGas.xlsx",method="curl")
download.file(fileURL,destfile="./natGas.xlsx",method="curl")
download.file(fileURL,destfile="./natGas.xlsx",method="curl")
fileURL <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileURL,destfile="./natGas.xlsx",method="curl")
natGas <- read.xlsx("./getdata-data-DATA.gov_NGAP.xlsx",sheetIndex = 1,header=TRUE,rowIndex = c(18,23),colIndex = c(7,15))
View(natGas)
rows <- 18:23
cols <- 7:15
rows
natGas <- read.xlsx("./getdata-data-DATA.gov_NGAP.xlsx",sheetIndex = 1,header=TRUE,rowIndex = rows,colIndex = cols
)
View(natGas)
sum(natGas$Zip*natGas$Ext,na.rm=T)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
library(XML)
doc <- xmlTreeParse(fileURL,useInternalNodes = TRUE)
fileURL <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileURL,useInternalNodes = TRUE)
head(doc)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
xmlSApply(rootNode, xmlValue)
rootNode[1]
xpathSApply(rootNode,"//zipcode",xmlValue)
table(xpathSApply(rootNode,"//zipcode",xmlValue))
