summarise(cran, avg_bytes=mean(size))
summarize(cran, avg_bytes=mean(size))
getwd()
setwd("c:/GIT/datascience/GettingAndCleaningData/data/")
getwd()
setwd("c:/GIT/datascience/GettingAndCleaningData")
getwd()
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileURL, destfile="./data/IdahoHousing2006.csv")
idaho <- read.csv("./data/IdahoHousing2006.csv")
idahoDF <- tbl_df(idaho)
idahoDF
mutate(idahoDF, agriculturalLogical=(ACR=3 & AGS=6))
idahoDF
mutate(idahoDF, agriculturalLogical=(ACR=3 & AGS=6))
mutate(idahoDF, agriculturalLogical=(ACR==3 & AGS==6))
str(idahoDF$agriculturalLogical)
idahoDF
idahoDF <- mutate(idahoDF, agriculturalLogical=(ACR==3 & AGS==6))
idahoDF
head(idahoDF$agriculturalLogical)
idahoDF[which(agriculturalLogical)]
which(idahoDF$agriculturalLogical)
idahoDF %>% which(agriculturalLogical)
install.packages("jpeg")
library(jpeg)
?jpeg
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileURL, destfile="./data/jeff.jpg")
jeffjpeg <- jpeg(filename="./data/jeff.jpg")
jeffjpeg <- jpeg(filename="./data/jeff.jpg", native=T)
?download.file
download.file(fileURL, destfile="./data/jeff.jpg", mode="wb")
jeffjpeg <- jpeg(filename="./data/jeff.jpg")
jeffjpeg
rm(jeffjpeg)
download.file(fileURL, destfile="./data/jeffimage.jpg")#, mode="wb")
download.file(fileURL, destfile="./data/jeffimage.jpg", native=T)#, mode="wb")
download.file(fileURL, destfile="./data/jeffimage.jpg", mode="wb")#, mode="wb")
jeffjpeg <- jpeg(filename="./data/jeff.jpg")
jeffjpeg
?jpeg
jeffjpeg <- jpeg(filename="./data/jefimage.jpg")
jeffjpeg <- jpeg(filename="./data/jeffimage.jpg")
jeffjpeg
download.file(fileURL, destfile="./data/jeffimage.jpg", mode="wb")#, mode="wb")
img <- readJPEG("./data/jeffimage.jpg", native=TRUE)
img
rasterImage(img)
if(exists("rasterImage")){
plot(1:2, type='n')
rasterImage(img,1,1,2,2)
}
?readJPEG
exists("rasterImage")
if(exists("rasterImage")){
plot(1:2, type='n')
rasterImage(img,1,1,2,2)
}
quantiles(img, probs=c(0.3,0.8))
quantile(img, probs=c(0.3,0.8))
file1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
file2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(file1, destfile="./data/GDP-ranking-table.csv")
download.file(file2, destfile="./data/ed-stats.csv")
GDP <- read.csv("./data/GDP-ranking-table.csv")
ED <- read.csv("./data/ed-stats.csv")
names(GDP)
names(ED)
head(GDP)
head(ED)
names(GDP)
names(ED)
View(ED)
mergedData <- merge(x = GDP, y=ED, by.x = "X", by.y = "CountryCode", all=TRUE)
mergedDF <- tbl_df(mergedData)
mergedDF
names(mergedDF)
?merge
head(GDP,5)
tail(GDP,5)
View(GDP)
GDPsub <- GDP[5:194,c("X","Gross.domestic.product.2012","X.2","X.3")]
View(GDPsub)
names(GDPsub) <- c("CountryCode","GDPRank","CountryName","GDP_millions")
mergedData <- merge(x = GDPsub, y=ED, by.x = "CountryCode", by.y = "CountryCode", all=TRUE)
View(mergedData)
mergedDF <- tbl_df(mergedData)
names(mergedDF)
sum(is.na(mergedData$CountryCode))
sum(is.na(mergedDF$GDPRank))
nrow(mergedDF)
235-45
nrow(mergedDF) - sum(is.na(mergedDF$GDPRank))
arrange(medgedDF, desc(GDPRank)
arrange(medgedDF, desc(GDPRank))
arrange(merdgedDF, desc(GDPRank))
arrange(mergedDF, desc(GDPRank))
head(arrange(mergedDF, desc(GDPRank)),13)
GDP <- read.csv("./data/GDP-ranking-table.csv", stringsAsFactors = FALSE)
ED <- read.csv("./data/ed-stats.csv", stringsAsFactors = FALSE)
GDPsub <- GDP[5:194,c("X","Gross.domestic.product.2012","X.2","X.3")]
names(GDPsub) <- c("CountryCode","GDPRank","CountryName","GDP_millions")
mergedData <- merge(x = GDPsub, y=ED, by.x = "CountryCode", by.y = "CountryCode", all=TRUE)
mergedDF <- tbl_df(mergedData)
names(mergedDF)
nrow(mergedDF) - sum(is.na(mergedDF$GDPRank))
head(arrange(mergedDF, desc(GDPRank)),13)
mergedDF$GDPRank <- as.numeric(mergedDF$GDPRank)
View(mergedDF)
head(arrange(mergedDF, desc(GDPRank)),13)
rm(cran)
rm(cran2)
rm(cran3)
?mean
mergedDF %>% filter(Income.Group=="High income: OECD") %>% summarise(avgGDPRank=mean(GDPRank,na.rm=T))
mergedDF %>% filter(Income.Group=="High income: nonOECD") %>% summarise(avgGDPRank=mean(GDPRank,na.rm=T))
?cut2
?cut
cut(mergedDF$GDPRank, 5)
??cut2
mergedDF2 <- mutate(mergedDF, GDPRankGroup=cut2(GDPRank, g=5))
library(dplyr)
library(Hmisc)
mergedDF2 <- mutate(mergedDF, GDPRankGroup=cut2(GDPRank, g=5))
View(mergedDF2)
table(mergedDF2$GDPRankGroup, mergedDF2$Income.Group)
table(mergedDF2$GDPRankGroup, mergedDF2$Income.Group)
77-39
115-77
153-115
190-153
swirl()
ls()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(mean(size))
summarize(by_package, mean(size))
summarize(by_package, by=size, mean)
?summarize
detach("pachage:Hmisc", unload=T)
detach("package:Hmisc", unload=T)
summarize(by_package, mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count()))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique <- filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
rm(list=ls())
swirl()
library(swirl)
swirl()
library(tidyr)
students
?gather
View(students)
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data=res, col=sex_class, into=c("sex","class") )
submit()
students3
submit()
?spread
submit()
submit()
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- passed %>% mutate(status="passed")
failed <- failed %>% mutate(status="failed")
?bind_rows
bind_rows(passed, failed)
sat
submit()
submit()
submit()
cameraDate <- read.csv("./data/camera.csv")
cameraData <- read.csv("./data/camera.csv")
names(cameraData)
tolower(names(cameraData))
splitNames <- strsplit(names(cameraData),"\\.")
splitNames[[5:6]]
splitNames[[5][6]]
splitNames[[5]]
splitNames[[6]]
mylist <- list(letters=c("A","b","c"), numbers = 1:3, matrix(1:25, ncol=5))
head(mylist)
mylist[1]
mylist$letters
mylist[[1]]
splitNames[[6]][1]
firstElement <- function(x){x[1]}
sapply(splitNames, firstElement)
reviews <- read.csv("./data/reviews.csv"); solutions <- read.cev("./data/solutions.csv")
reviews <- read.csv("./data/reviews.csv"); solutions <- read.csv("./data/solutions.csv")
head(reviews, 2)
head(solutions, 2)
names(reviews)
sub("_","",names(reviews),)
testName <- "this_is_a_test"
sub("_","",testName)
gsub("_","",testName)
grep("Alameda", cameraData$intersection)
table(grepl("Alameda", cameraData$intersection))
cameraData2 <- cameraData[!grepl("Alameda",cameraData$intersection)]
cameraData2 <- cameraData[!grepl("Alameda",cameraData$intersection),]
grep("Alameda",cameraData$intersection, value=TRUE)
grep("JeffStreet", cameraData$intersection)
library(stringr)
nchar("Jeffrey Leek")
substr("Jeffrey Leek", 1, 7)
paste("Jeffrey","Leek")
paste0("Jeffrey","Leek")
str_trim("Jeff        ")
str_trim("   Jeff        ")
d1=date()
d1
class(d1)
d2 <- Sys.Date()
d2
class(d2)
system.time
system.time()
format(d2, "%a %b %d")
x <- c("1jan1960","2jan1960","30jul1960")
z <- as.Date(x, "%d%b%Y")
z
z[1] - z[2]
as.numeric(z[1] - z[2])
weekdays(d2)
months(d2)
months(z)
julian(d2)
365*46
library(lubridate)
install.packages("lubridate")
library(lubridate)
ymd("20140108")
mdy("08/04/2013")
d3 <- mdy("08/04/2013")
class(d3)
dmy("03-04-2013")
ymd_hms("2011-08-03 10:15:03")
ymd_hms("2011-08-03 10:15:03", tz="Pacific/Auckland")
?Sys.timezone
Sys.timezone()
x <- dmy(c("1jan1960","2jan1960","30jul1960"))
wday(x[1])
wday(x[1], label = TRUE)
?POSIXlt
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this-moment <- now()
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours=8,minutes=34,seconds=55)
this_moment
this_moment <- update(this_moment, hours=hour(now()), minutes=minute(now()))
this_moment
nyc <- now(TZ="America/New_York")
?now
nyc <- now(tzone="America/New_York")
nyc
depart <- nyc+days(2)
depart
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart+hours(15)+minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone="Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval
new_interval(arrive, last_time)
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
idaho <- read.csv("./data/IdahoHousing2006.csv", stringsAsFactors = FALSE)
rm(list=ls())
idaho <- read.csv("./data/IdahoHousing2006.csv", stringsAsFactors = FALSE)
names(idaho)
foo <- names(idaho)
foo2 <- strsplit(foo, "wgtp")
foo2[[123]]
foo2[123]
GDP <- read.csv("./data/GDP-ranking-table.csv", stringsAsFactors = FALSE)
View(GDP)
?gsub
GDP <- GDP %>% mutate(X.3=gsub(",","",X.3) %>% mean()
GDP <- GDP %>% mutate(X.3=gsub(",","",X.3)) %>% mean()
GDP <- GDP %>% mutate(X.3=gsub(",","",X.3))
GDP <- read.csv("./data/GDP-ranking-table.csv", stringsAsFactors = FALSE)
GDP <- GDP %>% mutate(X.3=gsub(",","",X.3))
mean(GDP$X.3, na.rm=T)
mean(GDP$X.3[5:,], na.rm=T)
mean(GDP$X.3[5:], na.rm=T)
GDP$X.3
GDP$X.3[5:]
GDP$X.3[5:194]
mean(as.numeric(GDP$X.3[5:194]),na.rm=T)
mean(as.numeric(GDP$X.3),na.rm=T)
mean(as.numeric(GDP$X.3[5:194]),na.rm=T)
GDP <- GDP %>% rename(X.2, countryName)
?rename
GDP <- GDP %>% rename(X.2=countryName)
GDP <- rename(GDP, X.2=countryName)
GDP <- rename(GDP, countryName=X.2)
nrow(grep("^United",GDP$countryName))
grep("^United",GDP$countryName)
length(grep("^United",GDP$countryName))
ED <- read.csv("./data/ed-stats.csv", stringsAsFactors = FALSE)
names(GDP)
names(ED)
head(GDP,5)
tail(GDP,5)
head(ED)
GDP <- read.csv("./data/GDP-ranking-table.csv", stringsAsFactors = FALSE)
names(GDP)
names(ED)
head(GDP,5)
tail(GDP,5)
head(ED)
GDPsub <- GDP[5:194,c("X","Gross.domestic.product.2012","X.2","X.3")]
names(GDPsub) <- c("CountryCode","GDPRank","CountryName","GDP_millions")
View(GDPsub)
mergedData <- merge(x = GDPsub, y=ED, by.x = "CountryCode", by.y = "CountryCode", all=TRUE)
mergedDF <- tbl_df(mergedData)
names(mergedDF)
View(mergedDF)
fiscalKnown <- grep("^Fiscal year end: June",mergedDF$Special.Notes)
fiscalKnown <- grep("^Fiscal year end: June",mergedDF$Special.Notes, label=T)
fiscalKnown <- grep("^Fiscal year end: June",mergedDF$Special.Notes, value=T)
fiscalKnown
length(fiscalKnown)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
View(amzn)
sampleTimes = index(amzn)
head(sampleTimes)
max(sampleTimes)
in2012 <- grep("^2012",sampleTimes)
length(in2012)
class(sampleTimes[1])
in2012POSIX <- ymd(sampleTimes)
in2012days <- day(in2012POSIX)
in2012days[1]
in2012days <- wday(in2012POSIX, label=T)
in2012days[1]
length(grep("^Mon",in2012days))
in2012POSIX <- ymd(in2012)
in2012dates <- sampleTimes[in2012]
in2012days <- format(in2012dates, "%A")
length(grep("^Mon",in2012days))
foo <- read.table("./project/train/X_train.txt")
trainData <- read.table("./project/train/X_train.txt")
View(trainData)
trainLabels <- read.table("./project/train/y_train.txt")
View(trainLabels)
trainSubjects <- read.table("./project/train/subject_train.txt")
View(trainSubjects)
rm(amzn)
rm(ED)
rm(GDP)
rm(idaho)
rm(mergedData)
rm(mergedDF)
rm(GDPsub)
?cbind
foo <- cbind(trainSubjects, trainLabels)
View(foo)
foo <- cbind(foo, trainData)
View(foo)
names(foo)[1:2] <- c("Subject","Activity")
View(foo)
allTrain <- cbind(trainSubjects, trainLabels)
allTrain <- cbind(allTrain, trainData)
names(allTrain)[1:2] <- c("Subject","Activity")
rm(foo)
testData <- read.table("./project/test/X_test.txt")
testLabels <- read.table("./project/test/y_test.txt")
testSubjects <- read.table("./project/test/subject_test.txt")
allTest <- cbind(testSubjects, testLabels)
allTest <- cbind(allTest, testData)
names(allTest)[1:2] <- c("Subject","Activity")
View(allTest)
allData <- rbind(allTrain,allTest)
View(allData)
features <- read.table("./project/features.txt")
View(features)
names(allData)[3:563] <- features$V2
features$V2
dim(features)
class(features$V2[1])
features <- read.table("./project/features.txt", stringsAsFactors = FALSE)
names(allData)[3:563] <- features$V2
select(allData, grep("mean", names(allData), value=TRUE))
select(allData, grep("mean", names(allData)))
grep("mean",features$V2)
grep("mean",features$V2, value = T)
select(allData, grep("mean",features$V2))
justmeans <- allData[grep("mean", features$V2, values=T)]
justmeans <- allData[grep("mean", features$V2, value=T)]
View(justmeans)
justmeans <- grep("mean", features$V2, value=T)
justmeans
testcols <- c("Subject","Activity",justmeans)
testcols
select(allData, testcols)
reducedData <- allData[testcols]
View(reducedData)
View(features)
justMeanStd <- grep("mean|std", features$V2, value=T)
justMeanStd
keepCols <- c("Subject","Activity",justMeanStd)
reducedData <- allData[keepCols]
View(reducedData)
?summarise_each
reducedData %>% group_by(Subject, Activity) %>%
summarise_each(funs(mean))
reducedData <- reducedData %>% group_by(Subject, Activity) %>%
summarise_each(funs(mean))
activityLables <- read.table("./project/activity_labels.txt", stringsAsFactors = FALSE)
View(activityLables)
testdata <- reducedData
testdata$Activity <- as.factor(testdata$Activity)
levels(testdata$Activity)
activityLabels <- read.table("./project/activity_labels.txt", stringsAsFactors = FALSE)
levels(testdata$Activity) <- activityLabels$V2
levels(testdata$Activity)
View(testdata)
reducedData$Activity <- as.factor(reducedData$Activity)
levels(reducedData$Activity) <- activityLabels$V2
?write.table
write.table(reducedData, file = "./humanActivity.txt", row.names = FALSE, col.names = TRUE)
foo <- read.table("./humanActivity.txt")
View(foo)
write.table(reducedData, file = "./humanActivity.txt", row.names = FALSE, col.names = FALSE)
foo <- read.table("./humanActivity.txt")
View(foo)
write.table(reducedData, file = "./humanActivity.txt", row.names = FALSE, col.names = TRUE)
foo <- read.table("./humanActivity.txt", header=TRUE)
View(foo)
setwd("./project")
dir()
rm(list=ls())
source("./run_analysis.R")
rm(list=c("trainData","trainLabels","trainSubjects","testData","testLabels","testSubjects","allData","allTest","allTrain","features","activityLabels"))
rm(list=c("trainData","trainLabels","trainSubjects","testData","testLabels",
"testSubjects","allData","allTest","allTrain","features",
"activityLabels", "justMeanStd","keepCols","reducedData"))
dir()
source("run_analysis.R")
foo <- read.table("./humanActivity.txt", header=TRUE)
View(foo)
head(foo)
setwd("C:/GIT/datascience")
